[
    {
        "role": "user",
        "content": [
            {
                "type": "text",
                "text": "Table: Queue\n\n+-------------+---------+\n| Column Name | Type    |\n+-------------+---------+\n| person_id   | int     |\n| person_name | varchar |\n| weight      | int     |\n| turn        | int     |\n+-------------+---------+\nperson_id column contains unique values.\nThis table has the information about all people waiting for a bus.\nThe person_id and turn columns will contain all numbers from 1 to n, where n is the number of rows in the table.\nturn determines the order of which the people will board the bus, where turn=1 denotes the first person to board and turn=n denotes the last person to board.\nweight is the weight of the person in kilograms.\n \n\nThere is a queue of people waiting to board a bus. However, the bus has a weight limit of 1000 kilograms, so there may be some people who cannot board.\n\nWrite a solution to find the person_name of the last person that can fit on the bus without exceeding the weight limit. The test cases are generated such that the first person does not exceed the weight limit.\n\nThe result format is in the following example.\n\n \n\nExample 1:\n\nInput: \nQueue table:\n+-----------+-------------+--------+------+\n| person_id | person_name | weight | turn |\n+-----------+-------------+--------+------+\n| 5         | Alice       | 250    | 1    |\n| 4         | Bob         | 175    | 5    |\n| 3         | Alex        | 350    | 2    |\n| 6         | John Cena   | 400    | 3    |\n| 1         | Winston     | 500    | 6    |\n| 2         | Marie       | 200    | 4    |\n+-----------+-------------+--------+------+\nOutput: \n+-------------+\n| person_name |\n+-------------+\n| John Cena   |\n+-------------+\nExplanation: The folowing table is ordered by the turn for simplicity.\n+------+----+-----------+--------+--------------+\n| Turn | ID | Name      | Weight | Total Weight |\n+------+----+-----------+--------+--------------+\n| 1    | 5  | Alice     | 250    | 250          |\n| 2    | 3  | Alex      | 350    | 600          |\n| 3    | 6  | John Cena | 400    | 1000         | (last person to board)\n| 4    | 2  | Marie     | 200    | 1200         | (cannot board)\n| 5    | 4  | Bob       | 175    | ___          |\n| 6    | 1  | Winston   | 500    | ___          |\n+------+----+-----------+--------+--------------+\n-------------------------------------------------------------------------------------------------------------------------------\n\nPlease reply in json format according to the above structure, without redundant output and escape characters, so that I can get the MS SQL syntax for testing:\nexample:\n\n{\n  \"Description\": \"xxxxxxx\",\n  \"sql\": \"SELECTxxxx;\",\n  \"Explanation\": \"xxxxxx\"\n}"
            }
        ]
    },
    {
        "role": "assistant",
        "content": [
            {
                "type": "text",
                "text": "{\n  \"sql\": \"\n    WITH cte AS (\n      SELECT person_name, weight,\n        SUM(weight) OVER (ORDER BY turn) AS total_weight\n      FROM Queue\n    )\n    SELECT person_name\n    FROM cte\n    WHERE total_weight <= 1000\n    ORDER BY total_weight DESC\n    LIMIT 1;\n  \",\n  \"Explanation\": \"1. Use a CTE (Common Table Expression) named 'cte' to calculate the running total of weights ordered by the 'turn' column.\n                  2. In the CTE, select the 'person_name', 'weight', and calculate the running total of weights using SUM() OVER() window function.\n                  3. Order the rows in the window function by the 'turn' column to get the running total in the correct order.\n                  4. In the main query, select the 'person_name' from the CTE.\n                  5. Add a condition to filter rows where the running total weight is less than or equal to 1000.\n                  6. Order the result by the running total weight in descending order.\n                  7. Limit the output to 1 row to get the last person who can board the bus without exceeding the weight limit.\"\n}"
            }
        ]
    }
]